
;; https://gitlab.com/shilling.jake/emacsd/-/blob/master/config.org
(setq user-full-name "Yusuf Pisan"
      user-mail-address "pisan@uw.edu")

(defun emacs-updated-push-to-github ()
  (interactive)
  (let ((m  (expand-file-name (concat (file-name-as-directory default-directory)
                                      (file-name-as-directory "bitbucket")
                                      (file-name-as-directory "pisanuw")
                                      (file-name-as-directory "dot")
                                      "Makefile"))))
    (message (concat "make -f " m " update"))
    (shell-command (concat "make -f " m " update"))))
 
;; (defconst my/init (eval-when-compile (expand-file-name "init.el" user-emacs-directory)))
;; (defconst my/config (eval-when-compile (expand-file-name "config.org" user-emacs-directory)))
;; (defconst my/custom (eval-when-compile (expand-file-name "custom.el" user-emacs-directory)))
(defconst my/backups (eval-when-compile (expand-file-name "backups" user-emacs-directory)))
;; (defconst my/agenda (eval-when-compile (expand-file-name "agenda" user-emacs-directory)))
;; (defconst my/java-format-settings-file (eval-when-compile (expand-file-name "spring-eclipse-code-conventions.xml")))


;;; Encodings
(prefer-coding-system 'utf-8-unix)
(set-locale-environment "en_US.UTF-8")
(set-default-coding-systems 'utf-8-unix)
(set-selection-coding-system 'utf-8-unix)
(set-buffer-file-coding-system 'utf-8-unix)
(set-clipboard-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; By default, EMACS saves backup files in the same directory as the
;; original. This creates a problem where I’m constantly adding these
;; backup files to my .gitignore files. Instead, we want to save any
;; backups into a sub directory of my my/backups folder. While we’re at
;; it, we can also tell EMACS to not worry about deleting old backups and
;; to add version numbers to the end of each backup file name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq backup-by-copying t
      backup-directory-alist `(("." . ,my/backups))
      delete-old-versions t
      kept-new-versions 10
      kept-old-versions 1
      version-control t)

;; Also, store auto-saves in the same backup directory:
(setq auto-save-file-name-transforms `((".*" ,(file-name-as-directory my/backups) t)))

(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")
        ("melpa" . "http://stable.melpa.org/packages/")))

(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)

;; install if necessary
(require 'package)
(package-initialize)

(defun package-install-require (pcks)
  (interactive "p")
  (dolist (pck pcks)
    (unless (package-installed-p pck)
      (package-install pck)))
  (dolist (pck pcks)
    (require pck)))

;; Might need to run M-x package-refresh-contents
(progn
  (package-install-require '(smartparens))
  (smartparens-global-mode t))

;;; GUI
(setq inhibit-startup-screen t)
(setq visible-bell t)
(setq show-trailing-whitespace t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(show-paren-mode 1)
(global-hl-line-mode -1)
(column-number-mode t)
(fset 'yes-or-no-p 'y-or-n-p)
;; (display-time)

(load-theme  'wombat)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; $PATH
;; There are a few packages which depend on executables installed on
;; the system. EMACS finds these executables by searching through
;; directories in the exec-path variable. The exec-path-from-shell
;; package makes sure this variable matches the $PATH variable from
;; the user’s shell.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Initialize environment from the user’s shell.
(progn
  (package-install-require '(exec-path-from-shell))
  (exec-path-from-shell-initialize))

;; for Mac, change font using +/i 
(when (eq system-type 'darwin)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (defun my/text-scale-reset ()
    "Reset text-scale to 0."
    (interactive)
    (text-scale-set 0))
  (global-set-key (kbd "C-0") 'my/text-scale-reset))

;; helps you learn keys, pop-up options when you wait after C-x
(progn
  (package-install-require '(which-key))
  (which-key-mode t)
  (which-key-setup-side-window-right-bottom))

(progn
  (package-install-require '(hydra ivy))
  (ivy-mode 1))

;; mark lines, use C-c m c to act on all lines
(progn
  (package-install-require '(multiple-cursors))
  (global-set-key (kbd "C-c m c") 'mc/edit-lines))

;; Git wrapper - might be interesting
;; (progn
;;   (package-install-require '(magit))
;;   (global-set-key (kbd "C-x g") 'magit-status))


;; this requires more investigation
(progn
  (package-install-require '(lsp-mode))
  (global-set-key (kbd "C-c m c") 'mc/edit-lines))

(defconst my/clang (executable-find "clang"))
(if my/clang
    (defconst my/clang-resource-dir
      (string-trim (shell-command-to-string (concat my/clang " -print-resource-dir"))))
  (defconst my/clang-resource-dir nil))
  
;; from Tim Menzies dotemacs file at https://github.com/timm/dot/blob/master/ncsu/vcl/dotemacs
(progn
  (global-font-lock-mode t)
  ;(global-hl-line-mode 0)
  (load-theme  'wombat)
  (setq column-number-mode t)
  (setq inhibit-startup-message t)
  (setq make-backup-files nil) 
  (setq scroll-step 1)
  ;(setq-default fill-column 52)
  (setq-default indent-tabs-mode nil)
  (show-paren-mode t)
  (xterm-mouse-mode t)
)

;; C-x C-+ larger font
;; (set-default-font "Monaco 14")

(fset 'swap-with-XXX
   "\C-a\C-y\C-k\C-rXXX\C-a\C-y\C-k\C-x\C-s")


(autoload 'csharp-mode "csharp-mode" "Major mode for editing C# code." t)
(setq auto-mode-alist
      (append '(("\\.cs$" . csharp-mode)) auto-mode-alist))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.Rmd\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode"
   "Major mode for editing GitHub Flavored Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq load-path
      (append '("/Users/yusuf/Documents/lisp/") load-path))

;; no spaces please
(setq default-tab-width 4)

(if (string-equal "darwin" (symbol-name system-type))
    (progn 
      (setenv "PATH" (concat (getenv "PATH")
 ":/usr/local/bin:/Users/yusuf/bin:/usr/local/ec2/ec2-api-tools-1.7.5.1/bin:/Library/TeX/texbin:"))
      (setenv "JAVA_HOME" "/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home")
      (setenv "EC2_HOME" "/usr/local/ec2/ec2-api-tools-1.7.5.1")))

;; Since the DOT files are in a public repo
;; DO NOT put any private information in DOT files
; (setenv "AWS_ACCESS_KEY" "...")
; (setenv "AWS_SECRET_KEY" "...")


;(require 'ido)
;(ido-mode t)
(if (and nil (not (version<= emacs-version "23")))
    (progn
      (require 'auto-complete)
      (ac-config-default)
      (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
      (require 'auto-complete-config)
      (ac-config-default)
      (global-auto-complete-mode t)
      ))

(defun my-c-mode-common-hook ()
  (c-set-style "ellemtel"))

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)


(defun crun() ; execute-c-program ()
  (interactive)
  (defvar foo)
  (setq foo (concat "gcc -Wall " (buffer-name) " && ./a.out" ))
  (shell-command foo))

;(global-set-key [C-f1] 'execute-c-program)

; (byte-recompile-directory (expand-file-name "/Users/yusuf/Documents/lisp/") 0)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
(put 'downcase-region 'disabled nil)


;;; UW computers
(defun homer ()
  (interactive)
  (find-file "/scp:pisan@homer.u.washington.edu:"))

(defun ovid ()
  (interactive)
  (find-file "/scp:pisan@ovid.u.washington.edu:"))

(defun css-linux-lab ()
  (interactive)
  (let* ((netid "pisan")
         (num (number-to-string (+ 1 (random 12))))
         (sshcmd (concat "/ssh:" netid "@csslab" num ":")))
    (message "Connecting to %s" sshcmd)
    (find-file sshcmd)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (lsp-mode which-key smartparens php-mode multiple-cursors markdown-mode ivy hydra highlight2clipboard exec-path-from-shell))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
